<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:amq="http://activemq.apache.org/schema/core"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://activemq.apache.org/schema/core
		http://activemq.apache.org/schema/core/activemq-core.xsd"
>

	<context:component-scan base-package="com.guanhuan.component.message" />
	<mvc:annotation-driven />

	<!-- 真正可以产生Connection的ConnectionFactory，由ActiveMQ提供 -->
	<amq:connectionFactory id="targetConnectionFactory"
						   brokerURL="tcp://localhost:61616"
						   userName="admin"
						   password="admin" />

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		  class="org.springframework.jms.connection.CachingConnectionFactory">
		<constructor-arg ref="targetConnectionFactory" />
		<property name="sessionCacheSize" value="100" />
	</bean>

	<!--这个是队列目的地 -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queueDestination"/>
	</bean>

	<!-- email队列 -->
	<bean id="emailDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="emailDestination"/>
	</bean>

	<!-- 短信队列 -->
	<bean id="phoneMsgDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="phoneMsgDestination"/>
	</bean>

	<!-- 默认的topic -->
	<bean id="topicDestination"  class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topicDestination"/>
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!--<property name="defaultDestination" ref="queueDestination" />-->
		<property name="defaultDestination" ref="topicDestination" />
		<property name="receiveTimeout" value="10000" />
		<!-- 非pub/sub模型 队列模式 -->
		<property name="pubSubDomain" value="true" />

		<!-- deliveryMode, priority, timeToLive 的开关要生效，必须配置为true，默认false-->
		<property name="explicitQosEnabled" value="true"/>
		<!-- 发送模式
             DeliveryMode.NON_PERSISTENT=1:非持久 ;
             DeliveryMode.PERSISTENT=2:持久
        -->
		<property name="deliveryMode" value="1"/>
	</bean>


	<!--监听的作用，一但有数据存入既立刻取出进行操作 -->

	<!-- 配置消息队列监听者（Queue） -->
	<!--<bean id="queueMessageListener" class="com.guanhuan.component.message.listener.QueueMsgListener" />-->

	<!-- 显示注入消息监听容器（Queue），配置连接工厂，监听的目标是demoQueueDestination，监听器是上面定义的监听器 -->
	<!--<bean id="queueListenerContainer"-->
		  <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
		<!--<property name="destination" ref="queueDestination" />-->
		<!--<property name="messageListener" ref="queueMessageListener" />-->
	<!--</bean>-->

	<!--<bean id="emailListenerContainer"-->
		  <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
		<!--<property name="destination" ref="emailDestination" />-->
		<!--<property name="messageListener" ref="queueMessageListener" />-->
	<!--</bean>-->

	<!--<bean id="messageListenerContainer"-->
		  <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
		<!--<property name="destination" ref="phoneMsgDestination" />-->
		<!--<property name="messageListener" ref="queueMessageListener" />-->
	<!--</bean>-->

	<!--消费者监听-->
	<!-- 配置消息消费监听者 -->
	<bean id="consumerMessageListener" class="com.guanhuan.component.message.listener.TopicMsgListener" />

	<!-- 消息订阅客户端1 -->
	<bean id="consumerListenerClient1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 开启订阅模式 -->
		<property name="pubSubDomain" value="true"/>
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="consumerMessageListener" />
		<!-- 消息应答方式
                     Session.AUTO_ACKNOWLEDGE  消息自动签收
                     Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
                     Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
                -->
		<property name="sessionAcknowledgeMode" value="1"/>

		<!--<property name="subscriptionDurable" value="true"/>-->
		<!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
		<!--<property name="clientId" value="consumerClient1"/>-->

	</bean>

	<!-- 消息订阅客户端2 -->
	<bean id="consumerListenerClient2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 开启订阅模式 -->
		<property name="pubSubDomain" value="true"/>
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="consumerMessageListener" />

		<!-- 消息应答方式
             Session.AUTO_ACKNOWLEDGE  消息自动签收
             Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收
             Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送
        -->
		<property name="sessionAcknowledgeMode" value="1"/>

		<!--<property name="subscriptionDurable" value="true"/>-->
		<!---这里是设置接收客户端的ID，在持久化时，但这个客户端不在线时，消息就存在数据库里，直到被这个ID的客户端消费掉-->
		<!--<property name="clientId" value="consumerClient2"/>-->

	</bean>

</beans>